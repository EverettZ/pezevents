# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Dev
on:
  push:
    branches:
      - develop
      - staging
      - main

jobs:
  # Print github context
  print_github_context:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: echo "$GITHUB_CONTEXT"

  # Check filechanges for functions deployment
  check_functions:
    name: Check files
    outputs:
      deploy_functions: ${{ steps.check_files.outputs.deploy_functions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file != functions/* ]]; then
              echo "This modified file is not under the 'functions' folder."
              echo "::set-output name=deploy_functions::false"
              break
            else
              echo "::set-output name=deploy_functions::true"
            fi
          done < files.txt

  check_env:
    name: Check env
    outputs:
      app_id: ${{ steps.check_env.outputs.app_id }}
    runs-on: ubuntu-latest
    steps:
      - name: Output current branch name & date
        # To use latest action, specify "release-master" instead of "v0.0.3"
        uses: satackey/action-js-inline@v0.0.2
        id: check_env
        with:
          script: |
            const core = require('@actions/core')

            // branch
            const ref = process.env.GITHUB_REF // refs/heads/main
            const branch = ref.split('/').slice(-1)[0] // refs/heads/main â†’ main
            console.log(`branch: ${branch}`)
            core.setOutput('branch', branch)
            let appId = 'dev-pezevents'
            if(branch == 'main') {
              appId = 'pezevents'
            } else if(branch == 'staging'){
              appId = 'stage-pezevents'
            } else if(branch == 'develop') {
              appId = 'dev-pezevents'
            }
            core.setOutput('app_id', appId)

  # Check filechanges for functions deployment
  check_lib_files:
    name: Check pezevents-lib files
    outputs:
      lib_changed: ${{ steps.check_files.outputs.lib_changed }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: check modified files
        id: check_files
        run: |
          echo "::set-output name=lib_changed::false"
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD

          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD > files.txt
          while IFS= read -r file
          do
            echo $file
            if [[ $file == projects/pezevents-lib/* ]]; then
              echo "This modified file is under the 'projects/pezevents-lib' folder."
              echo "::set-output name=lib_changed::true"
              break
            fi
          done < files.txt

  print_prereqs:
    name: Print pre-requisite need outputs
    needs: [check_functions, check_env, check_lib_files]
    runs-on: ubuntu-latest
    steps:
      - name: check_env outputs
        run: echo "app_id = ${{needs.check_env.outputs.app_id}}"
      - name: check_functions outputs
        run: echo "deploy_functions = ${{needs.check_functions.outputs.deploy_functions}}"
      - name: check_lib_files outputs
        run: echo "lib_changed = ${{needs.check_lib_files.outputs.lib_changed}}"

  build_and_publish_pezevents_lib:
    
    runs-on: ubuntu-latest
    needs: [check_lib_files]
    if: needs.check_lib_files.outputs.lib_changed == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup node
      uses: actions/setup-node@master
      with:
        node-version: '13.x'

    - name: Install environment
      run: npm ci
        
    - name: Build pezevents-lib
      run: npm run build-pezevents-lib
      
    - name: Publish if version has been updated
      uses: JS-DevTools/npm-publish@v1
      with:
        token: ${{ secrets.NPM_AUTH_TOKEN }}
        check-version: true
        package: ./dist/pezevents-lib/package.json

  # Deploy app to development
  # dev.sezzion.com
  deploy:
    runs-on: ubuntu-latest
    needs: [check_functions, check_env, build_and_publish_pezevents_lib]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@master
        with:
          node-version: '13.x'

      - name: Build app dev
        if: needs.check_env.outputs.app_id == 'dev-pezevents'
        run: |
          npm ci
          npm run build

      - name: Build app stage
        if: needs.check_env.outputs.app_id == 'stage-pezevents'
        run: |
          npm ci
          npm run build:staging

      - name: Build app prod
        if: needs.check_env.outputs.app_id == 'pezevents'
        run: |
          npm ci
          npm run build:prod

      - name: Build functions
        if: needs.check_functions.outputs.deploy_functions == 'true'
        working-directory: ./functions
        run: |
          npm ci
          npm run build

      - name: Deploy functions
        if: needs.check_functions.outputs.deploy_functions == 'true'
        uses: w9jds/firebase-action@master
        with:
          args: deploy -P ${{needs.check_env.outputs.app_id}} --only functions
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_CI_TOKEN }}

      - name: Deploy dev or stage
        if: needs.check_env.outputs.app_id == 'dev-pezevents' || needs.check_env.outputs.app_id == 'stage-pezevents'
        uses: w9jds/firebase-action@master
        with:
          args: deploy -P ${{needs.check_env.outputs.app_id}} --only hosting:${{needs.check_env.outputs.app_id}}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_CI_TOKEN }}

      - name: Deploy prod
        if: needs.check_env.outputs.app_id == 'pezevents'
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_PEZEVENTS }}"
          channelId: live
          projectId: pezevents
          target: pezevents
        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels
